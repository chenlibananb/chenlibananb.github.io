{"mdlist":[],"folderlist":[{"mdlist":[],"folderlist":[{"mdlist":[],"folderlist":[{"mdlist":[{"name":"day01.md","headerlist":[]},{"name":"day02.md","headerlist":[]},{"name":"day03.md","headerlist":[]},{"name":"day04.md","headerlist":[]},{"name":"day05.md","headerlist":[]},{"name":"day06.md","headerlist":[]},{"name":"day01_marked.md","headerlist":["# 第二阶段任务安排：","## 一.嵌入式linux系统开发环境搭建","###   面试题：谈谈对嵌入式linux软件设计的理解","###   实施步骤：","####   1.安装纯linux系统","####   2.安装必要的开发工具","####   3.明确嵌入式linux系统开发基本模式","####    4.内心一定要明确嵌入式linux系统软件的组成部分","#####    1.bootloader(统称),普遍使用uboot","#####    2.linux内核zImage,又称操作系统内核","#####     3.根文件系统rootfs(root + file system) ","####   5.明确了嵌入式linux系统软件的组成部分以后,明确","#### 6.将三部分软件烧写到Nand上","##### 实施步骤：","###### 1.从ftp://PORTING/下载烧写的软件镜像","###### 2.将镜像文件拷贝到linux虚拟机","###### 3.烧写之前,对Nand进行分区的划分","###### 4.重启开发板,进入开发板的uboot命令行模式,执行：","###### 5.同样在uboot的命令行继续执行：","######  6.启动流程："]},{"name":"day02_marked.md","headerlist":["# 回顾：","## 1.中断处理过程","## 2.嵌入式linux系统相关内容","###  2.1.搭建上位机(PC)开发环境","###  2.2.明确：嵌入式linux开发模式","###  2.3.明确：开发板的基本硬件信息","###  2.4.明确：嵌入式linux软件组成部分和功能","####      \t1.硬件初始化","####      \t2.从\"某个地方\"加载内核到内存","###  2.5.明确：嵌入式linux系统的启动过程","###  2.6.烧写(=固化=部署)三部分软件到下位机","## 案例：烧写普通linux系统到TPAD","## 实施步骤：","### 1.从ftp获取普通linux系统的镜像文件","### 2.拷贝镜像文件到虚拟机","### 3.烧写之前记得要进行Nand的分区规划","### 4.启动开发板,进入uboot的命令行模式，执行：","### 5.部署完毕,记得要设置系统启动参数","### 6.重启开发板,观察串口的系统启动信息","## 案例：问：如何在开发板上运行自己的应用程序","## 实施步骤：","### 1.明确：前提是咱们已经在开发板上固化了普通的linux系统","### 2.在虚拟机linux中构建一个rootfs,执行：","### 3.在虚拟机linux编辑编译一个简单的UC程序","### 4.掌握NFS网络文件系统(本质利用NFS网络服务,比tftp强悍)","## 总结：如果uboot的启动参数为：","## 启动过程：","## 总结："]},{"name":"day05.txt","headerlist":[]}],"folderlist":[],"folderName":"02PORTING","path":"/嵌入式笔记/02ESD1512/02PORTING"},{"mdlist":[{"name":"day01.md","headerlist":[]},{"name":"day02.md","headerlist":[]},{"name":"day03.md","headerlist":[]},{"name":"day04.md","headerlist":[]},{"name":"day05.md","headerlist":[]},{"name":"day06.md","headerlist":[]},{"name":"day07.md","headerlist":[]},{"name":"day08.md","headerlist":[]},{"name":"day09.md","headerlist":[]},{"name":"day10.md","headerlist":[]},{"name":"day11.md","headerlist":[]}],"folderlist":[],"folderName":"05DRV","path":"/嵌入式笔记/02ESD1512/05DRV"}],"folderName":"02ESD1512","path":"/嵌入式笔记/02ESD1512"}],"folderName":"嵌入式笔记","path":"/嵌入式笔记"},{"mdlist":[{"name":"嵌入式面试题.md","headerlist":["# 一、\t预处理器（Preprocessor）","## 1.\t用预处理指令#define 声明一个常数，用以表明1年中有多少秒（忽略闰年问题）","## 2.\t写一个\"标准\"宏MIN ，这个宏输入两个参数并返回较小的一个。","## 3.\t预处理器标识#error的目的是什么？","## 4.\t 嵌入式系统中经常要用到无限循环，你怎么样用C编写死循环呢？","## 5.\t 用变量a给出下面的定义","## 6.\t 关键字static的作用是什么？","## 7．关键字const有什么含意？","## 8. 关键字volatile有什么含意?并给出三个不同的例子。","## 9. 嵌入式系统总是要用户对变量或寄存器进行位操作。给定一个整型变量a，写两段代码，第一个设置a的bit 3，第二个清除a 的bit 3。在以上两个操作中，要保持其它位不变。","## 10. 嵌入式系统经常具有要求程序员去访问某特定的内存位置的特点。在某工程中，要求设置一绝对地址为0x67a9的整型变量的值为0xaa55。","## 11. 中断是嵌入式系统中重要的组成部分，这导致了很多编译开发商提供一种扩展——让标准C支持中断。具代表事实是，产生了一个新的关键字__interrupt。下面的代码就使用了__interrupt关键字去定义了一个中断服务子程序(ISR)，请评论一下这段代码的。","## 12 . 下面的代码输出是什么，为什么？","## 13. 评价下面的代码片断：","## 14. 尽管不像非嵌入式计算机那么常见，嵌入式系统还是有从堆（heap）中动态分配内存的过程的。那么嵌入式系统中，动态分配内存可能发生的问题是什么？","## 15 Typedef 在C语言中频繁用以声明一个已经存在的数据类型的同义字。也可以用预处理器做类似的事。例如，思考一下下面的例子：","## 16 . C语言同意一些令人震惊的结构,下面的结构是合法的吗，如果是它做些什么？"]}],"folderlist":[],"folderName":"嵌入式面试题","path":"/嵌入式面试题"}],"folderName":"/","url":"http://localhost:8081/mymdwiki-for-tarena-qrs/md/mdinfo.json","path":"/"}